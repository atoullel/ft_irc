----------Q&A for recv()----------

Some of these depend on whether we're using a stream socket (SOCK_STREAM) or a datagram socket (SOCK_DGRAM).
We'll be using TCP which corresponds to the former.

-How do you know how big to make the buffer passed to recv()?

It doesn't really matter too much. If your protocol is a transactional / interactive
one just pick a size that can hold the largest individual message / command you would
reasonably expect (3000 is likely fine). If your protocol is transferring bulk data, then larger
buffers can be more efficient - a good rule of thumb is around the same as the kernel receive
buffer size of the socket (often something around 256kB).
That said, common values that are powers of 2 such as 4096 or 8192 are recommended.

-What happens if recv gets a packet larger than the buffer?

The question doesn't really make sense as put, because stream sockets don't
have a concept of packets - they're just a continuous stream of bytes. If there's more bytes
available to read than your buffer has room for, then they'll be queued by the OS and
available for your next call to recv.

-How can I know if I have received the entire message?

You need to build some way of determining the end-of-message into your
application-level protocol. Commonly this is either a length prefix (starting each message with
the length of the message) or an end-of-message delimiter (which might just be a newline in
a text-based protocol, for example). A third, lesser-used, option is to mandate a fixed size for
each message. Combinations of these options are also possible - for example, a fixed-size
header that includes a length value.

----------SIGPIPE INFO----------


You generally want to ignore the SIGPIPE and handle the error directly in your code.
This is because signal handlers in C have many restrictions on what they can do.

The most portable way to do this is to set the SIGPIPE handler to SIG_IGN.
This will prevent any socket or pipe write from causing a SIGPIPE signal.

To ignore the SIGPIPE signal, use the following code:

signal(SIGPIPE, SIG_IGN);

If you're using the send() call, another option is to use the MSG_NOSIGNAL option,
which will turn the SIGPIPE behavior off on a per call basis.
Note that not all operating systems support the MSG_NOSIGNAL flag.

Lastly, you may also want to consider the SO_NOSIGPIPE socket flag that can be set with setsockopt()
on some operating systems (e.g. those derived from BSD). This will prevent SIGPIPE from being caused
by writes just to the sockets it is set on.

--------------- EPOLL STRUCT ------------
       #include <sys/epoll.h>

       struct epoll_event {
           uint32_t      events;  /* Epoll events */
           epoll_data_t  data;    /* User data variable */
       };

       union epoll_data {
           void     *ptr;
           int       fd;
           uint32_t  u32;
           uint64_t  u64;
       };

       typedef union epoll_data  epoll_data_t;
